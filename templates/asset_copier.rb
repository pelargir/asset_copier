# Generated by the asset_copier plugin
# http://github.com/pelargir/asset_copier

require 'find'
require 'digest/md5'

class AssetCopier
  def self.source
    File.expand_path(File.join(File.dirname(__FILE__), '..', 'files'))
  end
  
  def self.deleted_files
    File.expand_path(File.join(File.dirname(__FILE__), '..', 'deleted_files'))
  end
  
  def self.copy(plugin_name)
    begin
      each_path do |path, dest_path, short_path| 
        if File.directory?(path)
          unless File.exists?(dest_path)
            FileUtils.mkdir_p(dest_path)
            puts "Creating directory #{short_path} for #{plugin_name}"
          end
        else
          FileUtils.cp(path, dest_path)
          puts "Copying #{short_path} from #{plugin_name}"
        end
      end
    rescue Exception => e
      puts "Error trying to copy files: #{e.inspect}"
      raise e
    end
    print_deletion_warnings(plugin_name)
  end
  
  def self.warn(plugin_name)
    each_path do |path, dest_path, short_path|
      next if File.directory?(path)
      reinstall = false
      if File.exists?(dest_path)
        unless compare(path, dest_path)
          puts "WARNING: #{short_path} is out of date and needs to be reinstalled"
          reinstall = true
        end
      else
        reinstall = true
        puts "WARNING: #{short_path} is missing and needs to be installed"
      end
      puts "WARNING: Please run rake #{plugin_name}:install" if reinstall
    end
    print_deletion_warnings(plugin_name)
  end
  
  def self.compare(file1, file2)
    Digest::MD5.hexdigest(File.read(file1)) == Digest::MD5.hexdigest(File.read(file2))
  end
  
  def self.print_deletion_warnings(plugin_name)
    File.open(deleted_files, "r") do |f|
      f.readlines.reject { |l| l =~ /^#/ || l.strip.blank? }.each do |l|
        puts "WARNING: #{l} is no longer required by the #{plugin_name} plugin " <<
          "and can can be safely removed" if File.exists?(l)
      end
    end
  end
  
  def self.paths
    returning [] do |paths|
      Find.find(source) do |path|
        Find.prune if path =~ /\/\..+/
        Find.prune if path =~ /(CVS|.svn|.git)/
        paths << path
      end
    end
  end
  
  def self.each_path
    paths.each do |path|
      dest_path = path.gsub(source, RAILS_ROOT)
      short_path = dest_path.gsub("#{RAILS_ROOT}/", "")
      yield path, dest_path, short_path
    end
  end
end
